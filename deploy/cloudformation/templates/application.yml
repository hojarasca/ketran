Description: Udagram app infraestructure

Parameters:
  EnvName:
    Description: Name of the environment. 
    Type: String
  BastionAccessIp:
    Description: Ip address for where bastion can be accessed
    Type: String
  BastionSshKey:
    Description: ssh key used for bastion server
    Type: String
    Default: migue@pangea
  MainAppInstanceType:
    Description: Instance type used to deploy the main app
    Type: String
    Default: t3.medium # 2 vCPU, 4GiB ram

Resources:
  #
  # IAM
  #
  # AccessS3BucketInstanceProfile:
  #   Type: AWS::IAM::InstanceProfile
  #   Properties:
  #     Path: /
  #     Roles:
  #       - Ref: AccessS3BucketRole

  # AccessS3BucketRole:
  #   Type: AWS::IAM::Role
  #   Properties:
  #     RoleName: AccessS3BucketRole
  #     AssumeRolePolicyDocument:
  #       Version: 2012-10-17
  #       Statement:
  #         - Effect: Allow
  #           Principal:
  #             Service:
  #             - ec2.amazonaws.com
  #           Action:
  #             - 'sts:AssumeRole'
  #     Policies:
  #       - 
  #        PolicyName: "access-s3-elements"
  #        PolicyDocument:
  #          Version: "2012-10-17"
  #          Statement:
  #             - 
  #               Effect: "Allow"
  #               Action: 
  #                 - s3:GetObject
  #                 - s3:ListBucket
  #               Resource: 
  #                 - !Sub arn:aws:s3:::${SourceCodeS3Bucket}
  #                 - !Sub arn:aws:s3:::${SourceCodeS3Bucket}/*

  #
  # Security groups
  #
  BastionSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: BastionSecurityGroup
      GroupDescription: Security group for network entry poing
      VpcId:
        Fn::ImportValue:
          !Sub ${EnvName}-MainVpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref BastionAccessIp
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${EnvName} bastion security group
  
  KubernetesSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: KubernetesSecurityGroup
      GroupDescription: !Sub ${EnvName} main app security group
      VpcId:
        Fn::ImportValue: !Sub ${EnvName}-MainVpcId
      SecurityGroupIngress:
        # - IpProtocol: tcp
        #   FromPort: 80
        #   ToPort: 80
        #   SourceSecurityGroupId: !Ref MainAppLBSecurityGroup
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          SourceSecurityGroupId: !Ref BastionSecurityGroup
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          SourceSecurityGroupId:
            Fn::ImportValue: !Sub ${EnvName}-ci-security-group
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${EnvName} kubernetes servers security group
  KubernetesSecurityGroupEgressRuleTcp:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !GetAtt KubernetesSecurityGroup.GroupId 
      IpProtocol: tcp
      FromPort: 0
      ToPort: 65535
      DestinationSecurityGroupId: !Ref KubernetesSecurityGroup
  KubernetesSecurityGroupEgressRuleUdp:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !GetAtt KubernetesSecurityGroup.GroupId 
      IpProtocol: udp
      FromPort: 0
      ToPort: 65535
      DestinationSecurityGroupId: !Ref KubernetesSecurityGroup
  KubernetesSecurityGroupIngressRuleTcp:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt KubernetesSecurityGroup.GroupId 
      IpProtocol: tcp
      FromPort: 0
      ToPort: 65535
      SourceSecurityGroupId: !Ref KubernetesSecurityGroup
  KubernetesSecurityGroupIngressRuleUdp:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt KubernetesSecurityGroup.GroupId 
      IpProtocol: udp
      FromPort: 0
      ToPort: 65535
      SourceSecurityGroupId: !Ref KubernetesSecurityGroup

  # MainAppLBSecurityGroup:
  #   Type: AWS::EC2::SecurityGroup
  #   Properties:
  #     GroupName: MainAppLBSecurityGroup
  #     GroupDescription: !Sub ${EnvName} main app load balancer security group
  #     VpcId:
  #       Fn::ImportValue: !Sub ${EnvName}-MainVpcId
  #     SecurityGroupIngress:
  #       - IpProtocol: tcp
  #         FromPort: 80
  #         ToPort: 80
  #         CidrIp: 0.0.0.0/0
  # MainAppLBEgressRule:
  #   Type: AWS::EC2::SecurityGroupEgress
  #   Properties:
  #     GroupId: !GetAtt MainAppLBSecurityGroup.GroupId 
  #     IpProtocol: tcp
  #     FromPort: 80
  #     ToPort: 80
  #     DestinationSecurityGroupId: !Ref KubernetesSecurityGroup



  #
  # Computation (servers, scaling groups)
  #
  BastionServer:
    Type: AWS::EC2::Instance
    Properties:
      KeyName: !Ref BastionSshKey
      DisableApiTermination: false
      ImageId: ami-0faf2c48fc9c8f966
      InstanceType: t2.micro
      Monitoring: false
      # IamInstanceProfile: !Ref AccessS3BucketInstanceProfile
      NetworkInterfaces: 
      - AssociatePublicIpAddress: "true"
        DeviceIndex: "0"
        GroupSet: 
          - !Ref BastionSecurityGroup
        SubnetId: 
          Fn::ImportValue: !Sub ${EnvName}-PublicSubnetAid
      Tags:
        - Key: Name
          Value: !Sub ${EnvName} bastion

  KubeMasterASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - Fn::ImportValue: !Sub ${EnvName}-PrivateSubnetAid
        - Fn::ImportValue: !Sub ${EnvName}-PrivateSubnetBid
      LaunchConfigurationName: 
        Ref: KubeMasterLaunchConfig
      MinSize: 1
      MaxSize: 1
      Tags:
        - Key: Name
          Value: !Sub ${EnvName} kubernetes master
          PropagateAtLaunch: true
      # TargetGroupARNs:
      #   - Ref: MainAppLBTargetGroup

  KubeMasterLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: false
      ImageId: ami-0faf2c48fc9c8f966
      EbsOptimized: false
      InstanceMonitoring: false
      InstanceType: !Ref MainAppInstanceType
      KeyName: !Sub ${EnvName}-internal
      SecurityGroups:
        - !Ref KubernetesSecurityGroup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          apt-get update -y
          
          ## Install docker
          sudo apt-get install -y \
            apt-transport-https \
            ca-certificates \
            curl \
            gnupg-agent \
            software-properties-common
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
          sudo add-apt-repository -y \
            "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
            $(lsb_release -cs) \
            stable"
          sudo apt-get update -y
          sudo apt-get install -y docker-ce docker-ce-cli containerd.io

          ## Grant permissions for docker
          sudo usermod -aG docker ubuntu

          ## Install kubernetes

          curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
          sudo add-apt-repository -y "deb https://apt.kubernetes.io/ kubernetes-xenial main"
          sudo apt-get update -y
          sudo apt-get install -y kubelet kubeadm kubectl



          
          
  KubeNodeASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    UpdatePolicy: 
      AutoScalingRollingUpdate: 
        MinInstancesInService: "1"
        MaxBatchSize: "1"
    Properties:
      VPCZoneIdentifier:
        - Fn::ImportValue: !Sub ${EnvName}-PrivateSubnetAid
        - Fn::ImportValue: !Sub ${EnvName}-PrivateSubnetBid
      LaunchConfigurationName: 
        Ref: KubeNodeLaunchConfig
      MinSize: 1
      MaxSize: 2
      Tags:
        - Key: Name
          Value: !Sub ${EnvName} kubernetes node
          PropagateAtLaunch: true
      # TargetGroupARNs:
      #   - Ref: MainAppLBTargetGroup

  KubeNodeLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: false
      # IamInstanceProfile: !Ref AccessS3BucketInstanceProfile
      ImageId: ami-0faf2c48fc9c8f966
      EbsOptimized: false
      InstanceMonitoring: false
      InstanceType: !Ref MainAppInstanceType
      KeyName: !Sub ${EnvName}-internal
      SecurityGroups:
        - !Ref KubernetesSecurityGroup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          apt-get update -y
          
          ## Install docker
          sudo apt-get install -y \
            apt-transport-https \
            ca-certificates \
            curl \
            gnupg-agent \
            software-properties-common
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
          sudo add-apt-repository -y \
            "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
            $(lsb_release -cs) \
            stable"
          sudo apt-get update -y
          sudo apt-get install -y docker-ce docker-ce-cli containerd.io

          ## Grant permissions for docker
          sudo usermod -aG docker ubuntu

          ## Install kubernetes

          curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
          sudo add-apt-repository -y "deb https://apt.kubernetes.io/ kubernetes-xenial main"
          sudo apt-get update -y
          sudo apt-get install -y kubelet kubeadm kubectl




  #
  # Load balancer
  #
  # MainAppLB:
  #   Type: AWS::ElasticLoadBalancingV2::LoadBalancer
  #   Properties:
  #     SecurityGroups:
  #       - !Ref MainAppLBSecurityGroup
  #     Subnets:
  #       - Fn::ImportValue: !Sub ${EnvName}-PublicSubnetAid
  #       - Fn::ImportValue: !Sub ${EnvName}-PublicSubnetBid
  
  # MainAppLBListener:
  #   Type: AWS::ElasticLoadBalancingV2::Listener
  #   Properties:
  #     LoadBalancerArn:
  #       Ref: MainAppLB
  #     Port: 80
  #     Protocol: HTTP
  #     DefaultActions:
  #       - Type: forward
  #         TargetGroupArn: 
  #           Ref: MainAppLBTargetGroup

  # ALBListenerRule:
  #   Type: AWS::ElasticLoadBalancingV2::ListenerRule
  #   Properties:
  #     Actions:
  #     - Type: forward
  #       TargetGroupArn: !Ref MainAppLBTargetGroup
  #     Conditions:
  #     - Field: path-pattern
  #       Values: [/]
  #     ListenerArn: !Ref MainAppLBListener
  #     Priority: 1

  # MainAppLBTargetGroup:
  #   Type: AWS::ElasticLoadBalancingV2::TargetGroup
  #   Properties: 
  #     HealthCheckEnabled: true
  #     HealthCheckIntervalSeconds: 10
  #     HealthCheckPath: /
  #     HealthCheckPort: 80
  #     HealthCheckProtocol: HTTP
  #     HealthCheckTimeoutSeconds: 3
  #     HealthyThresholdCount: 3
  #     # Matcher: 
  #     #   HttpCode: 200
  #     Name: !Sub ${EnvName}-main-app-lb-tg
  #     Port: 80
  #     Protocol: HTTP
  #     # Tags: 
  #     #   - Tag
  #     UnhealthyThresholdCount: 3
  #     VpcId: 
  #       Fn::ImportValue: !Sub ${EnvName}-MainVpcId

# Outputs:
#   AppUrl:
#     Description: Project main url
#     Value: !Sub 
#       - http://${URL}
#       - { URL: !GetAtt MainAppLB.DNSName }
#     Export: 
#       Name: !Sub ${EnvName}-AppUrl

Outputs:
  BastionIp:
    Description: Bastion server public ip
    Value: !GetAtt BastionServer.PublicIp
    Export: 
      Name: !Sub ${EnvName}-bastion-public-ip